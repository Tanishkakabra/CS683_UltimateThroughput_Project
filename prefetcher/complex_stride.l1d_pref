#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_ENTRIES 1024 // IP table entries
#define PREFETCH_DEGREE 5         // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

// ------------ YOU CAN CHANGE THE IP_TABLE FOR YOU DESIGN ---------------- //

uint16_t prime_hash = 31;
#define n 10

class IP_TABLE
{
public:
    uint64_t ip_tag;
    uint16_t signature; // CPLX signature
    // uint64_t last_page;                     // last page seen by IP
    // int64_t last_stride;                    // last delta observed
    // uint16_t ip_valid;                      // Valid IP or not
    // int stride;                             // Stride
    // uint64_t last_cl_offset;                // last cl offset in the 4KB page
    // int conf;                               // CPLX conf
    uint64_t prev_addr;

    IP_TABLE()
    {
        ip_tag = 0;
        // last_page = 0;
        // last_cl_offset = 0;
        // last_stride = 0;
        // ip_valid = 0;
        signature = 0;
        // conf = 0;
        // stride = 0;
        prev_addr = 0;
    };
    void init(uint64_t ip_tag1)
    {
        ip_tag = ip_tag1;
        // last_page = 0;
        // last_cl_offset = 0;
        // last_stride = 0;
        // ip_valid = 0;
        signature = 0;
        // conf = 0;
        // stride = 0;
        prev_addr = 0;
    }
};

struct SignatureMap
{
    int64_t stride = 0;
    int64_t confidence = 0;
};

IP_TABLE trackers_cplx[NUM_CPUS][NUM_IP_TABLE_ENTRIES];
SignatureMap stride_map[(1 << n)];

// ------------------------- Updating the signature ---------------------------- //
uint16_t update_sig_l1(uint16_t old_sig, int delta)
{
    uint64_t new_sig = (old_sig << 1) ^ delta;
    new_sig = (new_sig) % (1 << n);
    return new_sig;
}

// ------------------- Updating confidence for the CPLX class ------------------ //
int update_conf(int stride, int pred_stride, int conf)
{
    conf += 1 * (stride == pred_stride) + (-1) * (stride != pred_stride);
    return conf;
}

// ------------------------- Initialize the prefetcher ------------------------- //
void CACHE::l1d_prefetcher_initialize()
{
    cout << "CPU " << cpu << " L1D Complex-Stride prefetcher" << endl;
}

uint16_t find_index(uint64_t ip, int cpu)
{
    uint16_t id = ip * prime_hash % NUM_IP_TABLE_ENTRIES;
    if (trackers_cplx[cpu][id].ip_tag == ip)
    {
        return id;
    }
    else
    {
        trackers_cplx[cpu][id].init(ip);
        return id;
    }
}

// --------------- This is the main prefetcher operate function ---------------- //
void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint8_t critical_ip_flag)
{
    // printf("Hello\n");
    uint16_t tracker_id = find_index(ip, cpu);
    uint64_t sign = trackers_cplx[cpu][tracker_id].signature;
    uint64_t prev_addr = trackers_cplx[cpu][tracker_id].prev_addr;
    int64_t true_stride = (addr >> LOG2_BLOCK_SIZE) - prev_addr;
    trackers_cplx[cpu][tracker_id].prev_addr = (addr >> LOG2_BLOCK_SIZE);
    trackers_cplx[cpu][tracker_id].signature = update_sig_l1(sign, true_stride);
    if (prev_addr == 0)
        return;
    // printf("Hoho\n");

    stride_map[sign].confidence = update_conf(true_stride, stride_map[sign].stride, stride_map[sign].confidence);
    if (stride_map[sign].confidence <= 0)
    {
        stride_map[sign].stride = true_stride;
        stride_map[sign].confidence = 0;
    }
    // now use new signature
    sign = trackers_cplx[cpu][tracker_id].signature;
    if (stride_map[sign].confidence <= 0)
        return;
    // printf("Hehe\n");
    int64_t stride = stride_map[sign].stride;

    for (int i = 1; i <= PREFETCH_DEGREE; i++)
    {
        uint64_t cl_addr = (addr) >> LOG2_BLOCK_SIZE;
        uint64_t pf_address = (cl_addr + i * stride) << LOG2_BLOCK_SIZE;

        // only issue a prefetch if the prefetch address is in the same 4 KB page
        // as the current demand access address
        if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
            break;

        // printf("PREFETCHING!!\n");
        prefetch_line(ip, addr, pf_address, FILL_L1, 0);
    }
    // printf("Successful\n");
    return;

    // uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;

    // --------------------- Add Complex-Stride pf_address logic here --------------------- //

    // prefetch_line(ip, addr, pf_address, FILL_L1, 0);

    // return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::l1d_prefetcher_notify_about_dtlb_eviction(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t v_addr, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t v_evicted_addr, uint64_t evicted_addr, uint32_t metadata_in)
{
}

void CACHE::l1d_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L1D complex stride prefetcher final stats" << endl;
    cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //