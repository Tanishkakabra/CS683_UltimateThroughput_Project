#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_IP_TABLE_ENTRIES 1024 // IP table entries
#define PREFETCH_DEGREE 4         // Prefetch degree
// ------------------------- DO NOT CHANGE -------------------------------- //

// ------------ YOU CAN CHANGE THE IP_TABLE FOR YOU DESIGN ---------------- //

uint16_t prime_hash = 31;

#define n 10


class IP_TABLE
{
public:
    uint64_t ip_tag;
    uint16_t signature; // CPLX signature                             // CPLX conf
    uint64_t prev_addr;

    void init(uint64_t ip_tag1)
    {
        ip_tag = ip_tag1;
        signature = 0;
        prev_addr = 0;
    }
};

struct SignatureMap
{
    int64_t stride = 0;
    int64_t confidence = 0;
};

IP_TABLE trackers_cplx[NUM_CPUS][NUM_IP_TABLE_ENTRIES];
SignatureMap stride_map[(1 << n)];

// ------------------------- Updating the signature ---------------------------- //
uint16_t update_sig_l1(uint16_t old_sig, int delta)
{
    uint64_t new_sig = (old_sig << 1) ^ delta;
    new_sig = (new_sig) % (1 << n);
    return new_sig;
}

// ------------------- Updating confidence for the CPLX class ------------------ //
int update_conf(int stride, int pred_stride, int conf)
{
    conf += 1 * (stride == pred_stride) + (-1) * (stride != pred_stride);
    return conf;
}

uint16_t find_index(uint64_t ip, int cpu)
{
    uint16_t id = ip * prime_hash % NUM_IP_TABLE_ENTRIES;
    if (trackers_cplx[cpu][id].ip_tag == ip)
    {
        return id;
    }
    else
    {
        trackers_cplx[cpu][id].init(ip);
        return id;
    }
}

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB distance prefetcher" << endl;

}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    uint16_t tracker_id = find_index(ip, cpu);
    uint64_t sign = trackers_cplx[cpu][tracker_id].signature;
    uint64_t prev_addr = trackers_cplx[cpu][tracker_id].prev_addr;
    int64_t true_stride = (addr) - prev_addr;
    trackers_cplx[cpu][tracker_id].prev_addr = (addr );
    trackers_cplx[cpu][tracker_id].signature = update_sig_l1(sign, true_stride);
    if (prev_addr == 0)
        return;

    stride_map[sign].confidence = update_conf(true_stride, stride_map[sign].stride, stride_map[sign].confidence);
    if (stride_map[sign].confidence <= 0)
    {
        stride_map[sign].stride = true_stride;
        stride_map[sign].confidence = 0;
    }
    // now use new signature
    sign = trackers_cplx[cpu][tracker_id].signature;
    if (stride_map[sign].confidence <= 0)
        return;

    int64_t stride = stride_map[sign].stride;

    int64_t sum = 0;
    for (int i = 1; i <= PREFETCH_DEGREE; i++)
    {   
        sum += stride;
        uint64_t cl_addr = (addr + stride) >> LOG2_BLOCK_SIZE;
        uint64_t pf_address = (cl_addr) << LOG2_BLOCK_SIZE;

        //printf("PREFETCHING!!\n");
        prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
        sign = update_sig_l1(sign, stride);
        if (stride_map[sign].confidence > 0){
          stride = stride_map[sign].stride;
        }
        else{
          break;
        }
        //printf("Prefetching for i = %d\n", i);
    }
    // printf("Successful\n");
    return;

}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB distance prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //