#include "cache.h"
// #include "page_table_walker.h"
#include "ooo_cpu.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define NUM_SP_TABLE_ENTRIES 1024   // IP table entries
#define PREFETCH_DEGREE 4           // Prefetch degree
#define MAX_FREE_DISTANCE 15        // Number of free distances
// #define PQ_SIZE 64                  // Prefetch Queue size
#define SBFP_THRESHOLD (1 << 10)  
uint16_t prime_hash = 31;        // Threshold for useful prefetching
// ------------------------- DO NOT CHANGE -------------------------------- //

// ------------------------ SBFP-specific Structures ----------------------- //
int count = 0;

struct FDTEntry {
    int confidence = 0;             // Confidence of prefetch success
};


class Sampler {
public:
    uint64_t vp = 0;
    int64_t free_distance = MAX_FREE_DISTANCE;
};

// Prefetch Queue and Free Distance Table for SBFP
Sampler sampler[NUM_SP_TABLE_ENTRIES];
FDTEntry fdt[MAX_FREE_DISTANCE]; //-7 to -1, 1 to 7 need to be indexed. So, index as +7?? 7 wont be used


// ---------------------- Helper Functions for SBFP ----------------------- //

// Update FDT confidence based on success/failure of prefetch
void update_fdt(int free_distance) {
    if (fdt[free_distance].confidence < SBFP_THRESHOLD)
        fdt[free_distance].confidence++;
    else{
        for (int i = 0; i < MAX_FREE_DISTANCE; i++)
            fdt[i].confidence = (fdt[i].confidence >> 1);
        fdt[free_distance].confidence++;
    }
}
// Find or initialize a tracker entry for an IP
int find_sampler_free_distance(uint64_t addr){
    for (int i = 0; i < NUM_SP_TABLE_ENTRIES; i++){
        if (sampler[i].vp == addr){
            int ans = sampler[i].free_distance;
            sampler[i].free_distance = MAX_FREE_DISTANCE;
            sampler[i].vp = 0;
            return ans; //should i just evict this now?
        }    
    }
    return MAX_FREE_DISTANCE;
}

void insert_in_sampler(uint64_t vp, int index){
    // cout << index << " " << vp << endl;
    for (int i = 0; i < NUM_SP_TABLE_ENTRIES; i++){
        if (sampler[i].vp == 0){ // empty sampler
            sampler[i].free_distance = index;
            sampler[i].vp = vp;
            return;
        }
    }
    //resembles LRU in a weird manner
    sampler[count].free_distance = index;
    sampler[count].vp = vp;
    count = (count + 1) % NUM_SP_TABLE_ENTRIES;
    //no free index found, what to do? 
    // printf("ono\n");
}

// ------------------------- Initialize the prefetcher ------------------------- //
void CACHE::stlb_prefetcher_initialize() {
    cout << "CPU " << cpu << " STLB SBFP prefetcher initialized" << endl;
}

// --------------- Main SBFP Prefetcher Operate Function ----------------------- //
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction) {
    // i think if cache hit ignore?
    if (cache_hit)
        return;
    int offset = (ooo_cpu[cpu].PTW.get_offset(addr, IS_PTL1) >> LOG2_BLOCK_SIZE);
    uint64_t vp = addr >> LOG2_PAGE_SIZE; //easier to index now
    //if addr in Sampler, update confidence for that free distance.
    int in_sampler_free_distance = find_sampler_free_distance(vp);
    if (in_sampler_free_distance < MAX_FREE_DISTANCE) //free distance valid means addr in sampler
        update_fdt(in_sampler_free_distance);
    
    // for (int i = 0; i < MAX_FREE_DISTANCE; i++){
    //     cout << fdt[i].confidence << " ";
    // }
    // cout << endl;
    //add addr ke aaju baaju wale to sampler. if confidence good for someone, prefetch as well
    for (int i = 0; i < offset; i++){// negative free distance; index with +7 anyways
        if (fdt[i - offset + MAX_FREE_DISTANCE / 2].confidence >= 100){//prefetch
            if (vp + i - offset <= 0)
                cout << vp + i - offset << endl;
            prefetch_translation(ip, ((vp + i - offset) << LOG2_PAGE_SIZE), (int)2, 0, prefetch_id, instruction);
        }
        else{//insert aaju baaju ke addresses in sampler
            insert_in_sampler(vp + i - offset, i - offset + MAX_FREE_DISTANCE / 2);
        }
            
    }
    for (int i = offset+1; i <= MAX_FREE_DISTANCE/2; i++){ //positive free distance
        if (fdt[i - offset].confidence >= 100){
            //prefetch
            if (vp + i - offset <= 0)
                cout << vp + i - offset << endl;
            prefetch_translation(ip, ((vp + i - offset) << LOG2_PAGE_SIZE), (int)2, 0, prefetch_id, instruction);
        }
        else{//insert in sampler
            insert_in_sampler(vp + i - offset, i - offset + MAX_FREE_DISTANCE / 2);
        }
    }
    
        
    
    return;
}

// --------------------- Functions to Handle Cache Events --------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in) {
    return; // For simplicity, no action taken on cache fill
}

void CACHE::stlb_prefetcher_final_stats() {
    cout << "CPU " << cpu << " STLB SBFP prefetcher final stats" << endl;
    cout << "Prefetch Degree: " << PREFETCH_DEGREE << endl;
}
